<?php

/**
 * @file
 * An entity agent.
 *
 * Ideally we would use an ORM, but we want to be very lightweight.
 */

namespace TestRig\Models;

use TestRig\Services\Database;
use TestRig\Services\Generate;

/**
 * @class
 * Entity.
 */
class Entity
{
    // Path to database.
    protected $path = NULL;
    // ID of current entity.
    private $id = NULL;

    // Data for database.
    public $data = array();

    // Default arguments.
    private $defaultArguments = array(
        'mean_response_time' => 500,
        'probability_reask' => 0.5,
    );

    /**
     * Implements ::__construct().
     */
    public function __construct($path, $id = NULL, $arguments = array())
    {
        $this->path = $path;

        // If we have an ID, try to load the entity.
        if ($id)
        {
            $this->read($id);
            return;
        }
        // Otherwise, create!
        $this->create($arguments);
    }

    /**
     * Create and save new entity.
     *
     * @param array $arguments
     *   Any arguments to be saved alongside autogenerated name.
     */
    public function create($arguments = array())
    {
        // Create data suitable for database.
        $this->data = array();
        $this->data['name'] = isset($arguments['name']) ? $arguments['name']
          : Generate::getEntityName();

        // Turn arguments into entity properties,, based on default arguments.
        foreach ($this->defaultArguments as $argumentName => $argumentData)
        {
            // Permit overriding by incoming arguments.
            if (isset($arguments[$argumentName]))
            {
                $argumentData = $arguments[$argumentName];
            }

            // Different callbacks based on argumentName.
            switch($argumentName)
            {
            case "mean_response_time":
                $this->data[$argumentName] = Generate::getTime($argumentData);
                break;

            case "probability_reask":
                $this->data[$argumentName] = Generate::getProbability($argumentData);
            }
        }

        // Write data, and extract the ID into a private attribute.
        Database::writeRecord($this->path, "entity", $this->data);
        $this->id = $this->data['id'];
    }

    /**
     * Read an existing entity into this object based on ID.
     */
    public function read($id)
    {
        $this->id = $id;
        $this->data = Database::readRecord($this->path, "entity", $this->id);
    }

    /**
     * Update this entity.
     */
    public function update()
    {
        // ID is not mutable.
        unset($this->data['id']);
        Database::updateRecord($this->path, "entity", $this->id, $this->data);
        $this->data['id'] = $this->id;
    }

    /**
     * Delete this entity.
     */
    public function delete()
    {
        Database::deleteRecord($this->path, "entity", $this->id);
        $this->id = NULL;
        $this->data = array();
    }

    /**
     * Get ID of this entity.
     */
    public function getID()
    {
        return $this->id;
    }
}
